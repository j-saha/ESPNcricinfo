CREATE OR REPLACE FUNCTION CALCULATE_AGE(P_ID IN VARCHAR2)
RETURN NUMBER IS
    AGE NUMBER;
BEGIN
		SELECT MONTHS_BETWEEN(SYSDATE, DATE_OF_BIRTH)/12 INTO AGE
		FROM PERSON
		WHERE PERSON_ID=P_ID;
		RETURN AGE;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
	WHEN OTHERS THEN 
		RETURN 0;
end;
/

BEGIN
    DBMS_OUTPUT.PUT_LINE(CALCULATE_AGE('AUS_Marsh_20-10-86'));
end;



CREATE OR REPLACE FUNCTION HIGHESTRUN_IN_GROUND(GID IN VARCHAR2)
RETURN VARCHAR2 IS
	FOUND_ID VARCHAR2(100);
BEGIN
	SELECT ID INTO FOUND_ID FROM(SELECT M.MATCH_ID AS ID, SUM(PS.SCORED_RUNS) AS RUN
	FROM MATCH M, PLAYER_SCORE PS, TEAM_PLAYER TP
	WHERE M.GROUND_ID=GID AND PS.MATCH_ID=M.MATCH_ID AND TP.PLAYER_ID=PS.PLAYER_ID
	GROUP BY M.MATCH_ID, TP.TEAM_ID) WHERE RUN=(SELECT MAX(SUM(PS.SCORED_RUNS)) AS RUN
	FROM MATCH M, PLAYER_SCORE PS, TEAM_PLAYER TP
	WHERE M.GROUND_ID=GID AND PS.MATCH_ID=M.MATCH_ID AND TP.PLAYER_ID=PS.PLAYER_ID
	GROUP BY M.MATCH_ID, TP.TEAM_ID);
	
	RETURN FOUND_ID;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 'NO DATA FOUND';
	WHEN OTHERS THEN
		RETURN 'NO MATCH PLAYED IN THIS GROUND';
END;
/

BEGIN
	DBMS_OUTPUT.PUT_LINE(HIGHESTRUN_IN_GROUND('ENG_Manchester'));
END;
/

CREATE OR REPLACE FUNCTION SIXES_IN_SERIES(S_ID IN VARCHAR2)
RETURN NUMBER IS
	NUM NUMBER;
BEGIN
	SELECT SUM(NUM_OF_SIXES) INTO NUM
	FROM MATCH M, PLAYER_SCORE PS
	WHERE M.MATCH_ID=PS.MATCH_ID AND M.SERIES_ID=S_ID;
	
	RETURN NUM;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		RETURN 0;
	WHEN OTHERS THEN 
		RETURN 0;
END;
/

BEGIN
	DBMS_OUTPUT.PUT_LINE(SIXES_IN_SERIES('AUSENG_SEP_20'));
	DBMS_OUTPUT.PUT_LINE(SIXES_IN_SERIES('BANPAK_JAN_20'));
END;
/

CREATE OR REPLACE TRIGGER TEAM_PLAYER_TRIGGER
    AFTER INSERT OR UPDATE
    ON PLAYER
    FOR EACH ROW
DECLARE
    P_ID VARCHAR2(50 CHAR);
    T_ID VARCHAR2(50 CHAR);
BEGIN
    SELECT TEAM_ID INTO T_ID FROM TEAM WHERE NAME=(SELECT NATIONALITY FROM PERSON WHERE PERSON_ID=:NEW.PLAYER_ID);
    P_ID:=:NEW.PLAYER_ID;

    INSERT INTO TEAM_PLAYER VALUES(T_ID, P_ID);

END;
/

--CHECKING A TEAM_STAT ALREADY IN TEAM_STAT TABLE
CREATE OR REPLACE FUNCTION CHECKING_TEAM_STAT(T_ID IN VARCHAR2)
RETURN VARCHAR2 IS
	ID VARCHAR2(50 CHAR);
BEGIN
	SELECT STAT_ID INTO ID
	FROM TEAM_STAT
	WHERE TEAM_ID=T_ID;
	RETURN ID;
EXCEPTION
	WHEN OTHERS THEN
		RETURN NULL;
END;
/
CREATE OR REPLACE TRIGGER TEAM_STAT_TRIGGER
    AFTER INSERT OR UPDATE
    ON MATCH
    FOR EACH ROW
DECLARE
    STAT_ID VARCHAR2(50 CHAR);
    TEAM1_ID VARCHAR2(50 CHAR);
    TEAM2_ID VARCHAR2(50 CHAR);
    WINNER_ID VARCHAR2(50 CHAR);
    LOSER_ID VARCHAR2(50 CHAR);
    TEAM_ID_WIN VARCHAR2(50 CHAR);
    CHK1 VARCHAR2(50 CHAR);
    CHK2 VARCHAR2(50 CHAR);

BEGIN
        TEAM1_ID := :NEW.TEAM1_ID;
		TEAM2_ID := :NEW.TEAM2_ID;

		IF :NEW.WINNER IS NOT NULL THEN
			SELECT TEAM_ID INTO TEAM_ID_WIN
			FROM TEAM
			WHERE NAME=:NEW.WINNER;

			IF TEAM_ID_WIN=TEAM1_ID THEN
					WINNER_ID:=TEAM1_ID;
					LOSER_ID:=TEAM2_ID;
			ELSE
					WINNER_ID:=TEAM2_ID;
					LOSER_ID:=TEAM1_ID;
			end if;


			CHK1:=CHECKING_TEAM_STAT(WINNER_ID);
			CHK2:=CHECKING_TEAM_STAT(LOSER_ID);
			IF CHK1 IS NULL THEN
					STAT_ID:='STAT '|| WINNER_ID;
					INSERT INTO STAT VALUES (STAT_ID, 1, 10);
					INSERT INTO TEAM_STAT VALUES (STAT_ID, WINNER_ID, 1, 0, 0);
			ELSE
			    	UPDATE STAT
					SET NUM_OF_MATCHES = NUM_OF_MATCHES + 1,
					    RATING=RATING+10
					WHERE STAT_ID=CHK1;
					UPDATE TEAM_STAT
					SET TOTAL_WIN = TOTAL_WIN + 1
					WHERE TEAM_ID = WINNER_ID;
			END IF;
			IF CHK2 IS NULL THEN
					STAT_ID:='STAT '|| LOSER_ID;
					INSERT INTO STAT VALUES (STAT_ID, 1, -5);
					INSERT INTO TEAM_STAT VALUES (STAT_ID, LOSER_ID, 0, 1, 0);
			ELSE
			    UPDATE STAT
					SET NUM_OF_MATCHES = NUM_OF_MATCHES + 1,
					    RATING=RATING-5
					WHERE STAT_ID=CHK2;
					UPDATE TEAM_STAT
					SET TOTAL_LOSE = TOTAL_LOSE + 1
					WHERE TEAM_ID = LOSER_ID;
			END IF;
		ELSE
		    CHK1:=CHECKING_TEAM_STAT(TEAM1_ID);
			CHK2:=CHECKING_TEAM_STAT(TEAM2_ID);
			IF CHK1 IS NULL THEN
					STAT_ID:='STAT '|| TEAM1_ID;
					INSERT INTO STAT VALUES (STAT_ID, 1, 0);
					INSERT INTO TEAM_STAT VALUES (STAT_ID, TEAM1_ID, 0, 0, 1);
			ELSE
					UPDATE TEAM_STAT
					SET NOT_PLAYED = NOT_PLAYED + 1
					WHERE TEAM_ID = TEAM1_ID;
			END IF;
			IF CHK2 IS NULL THEN
					STAT_ID:='STAT '|| TEAM2_ID;
					INSERT INTO STAT VALUES (STAT_ID, 1, 0);
					INSERT INTO TEAM_STAT VALUES (STAT_ID, TEAM2_ID, 0, 0, 1);
			ELSE
					UPDATE TEAM_STAT
					SET NOT_PLAYED = NOT_PLAYED + 1
					WHERE TEAM_ID = TEAM2_ID;
			END IF;

		END IF;



END;
/
CREATE OR REPLACE PROCEDURE GET_FULLNAME_FROM_PERSON(P_ID IN VARCHAR2, FULLNAME OUT VARCHAR2) IS
	F_NAME VARCHAR2(50);
	L_NAME VARCHAR2(50);
BEGIN 
	SELECT FIRST_NAME, LAST_NAME INTO F_NAME, L_NAME FROM PERSON
	WHERE PERSON_ID=P_ID;
	FULLNAME:=F_NAME||' '||L_NAME;
	
EXCEPTION
	WHEN OTHERS THEN 
		FULLNAME:='NO_DATA_FOUND';
END;
/
CREATE OR REPLACE PROCEDURE PROC_FOURS_IN_SERIES(SID IN VARCHAR2, CNT OUT NUMBER) IS
	
BEGIN
	SELECT SUM(NUM_OF_FOURS) INTO CNT
	FROM PLAYER_SCORE PS, MATCH M
	WHERE M.SERIES_ID=SID AND M.MATCH_ID=PS.MATCH_ID;
END;





