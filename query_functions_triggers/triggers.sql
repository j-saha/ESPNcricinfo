-- --DROP TRIGGER TEAM_SERIES_UPDATE;

--CHECKING A TEAM SERIES ALREADY IN TEAM SERIES TABLE
CREATE OR REPLACE FUNCTION CHECKING_TEAM_SERIES(TID IN VARCHAR2, SID VARCHAR2)
RETURN NUMBER IS
	CNT NUMBER;
BEGIN
	SELECT COUNT(*) INTO CNT
	FROM TEAM_SERIES
	WHERE TEAM_ID=TID AND SERIES_ID=SID;
	IF CNT>0 THEN
		RETURN 1;
	ELSE 	RETURN 0;
	END IF;
EXCEPTION
	WHEN OTHERS THEN 
		RETURN 0;
END;
/



CREATE OR REPLACE TRIGGER TEAM_SERIES_TABLE_UPDATE
AFTER INSERT OR UPDATEON TEAM_MATCH

DECLARE
	TID1 VARCHAR2(50);
	TID2 VARCHAR2(50);
	SID VARCHAR2(50);
	SDATE DATE;
	FDATE DATE;
	CHK1 NUMBER;
	CHK2 NUMBER;
	
BEGIN 
	FOR R IN (SELECT * FROM MATCH)
	LOOP
			TID1 := R.TEAM1_ID;
			TID2 := R.TEAM2_ID;
			SID := R.SERIES_ID;
			CHK1 := CHECKING_TEAM_SERIES(TID1,SID);
			CHK2 := CHECKING_TEAM_SERIES(TID2,SID);
			
			SELECT MIN(MATCH_DATE), MAX(MATCH_DATE) INTO SDATE,FDATE
			FROM TEAM_MATCH TM,MATCH M
			WHERE TM.MATCH_ID=M.MATCH_ID
			GROUP BY SERIES_ID
			HAVING SERIES_ID=SID;
			
			IF CHK1=1 THEN
				UPDATE TEAM_SERIES 
				SET START_DATE=SDATE, END_DATE=FDATE
				WHERE TEAM_ID=TID1 AND SERIES_ID=SID;
				--COMMIT;
			ELSE
				INSERT INTO TEAM_SERIES
				VALUES(TID1,SID,SDATE,FDATE);
				--COMMIT;
			END IF;
			
			IF CHK2=1 THEN
				UPDATE TEAM_SERIES 
				SET START_DATE=SDATE, END_DATE=FDATE
				WHERE TEAM_ID=TID2 AND SERIES_ID=SID;
				--COMMIT;
			ELSE
				INSERT INTO TEAM_SERIES
				VALUES(TID2,SID,SDATE,FDATE);
				--COMMIT;
			END IF;
	END LOOP;
EXCEPTION
	WHEN OTHERS THEN 
		DBMS_OUTPUT.PUT_LINE('NULL');

END;
/














--CHECKING A TEAM_STAT ALREADY IN TEAM_STAT TABLE
CREATE OR REPLACE FUNCTION CHECKING_TEAM_STAT(T_ID IN VARCHAR2)
RETURN VARCHAR2 IS
	ID VARCHAR2(50 CHAR);
BEGIN
	SELECT STAT_ID INTO ID
	FROM TEAM_STAT
	WHERE TEAM_ID=T_ID;
	RETURN ID;
EXCEPTION
	WHEN OTHERS THEN
		RETURN NULL;
END;
/
CREATE OR REPLACE TRIGGER TEAM_STAT_TRIGGER
    AFTER INSERT OR UPDATE
    ON MATCH
    FOR EACH ROW
DECLARE
    STAT_ID VARCHAR2(50 CHAR);
    TEAM1_ID VARCHAR2(50 CHAR);
    TEAM2_ID VARCHAR2(50 CHAR);
    WINNER_ID VARCHAR2(50 CHAR);
    LOSER_ID VARCHAR2(50 CHAR);
    TEAM_ID_WIN VARCHAR2(50 CHAR);
    CHK1 VARCHAR2(50 CHAR);
    CHK2 VARCHAR2(50 CHAR);

BEGIN
        TEAM1_ID := :NEW.TEAM1_ID;
		TEAM2_ID := :NEW.TEAM2_ID;

		IF :NEW.WINNER IS NOT NULL THEN
			SELECT TEAM_ID INTO TEAM_ID_WIN
			FROM TEAM
			WHERE NAME=:NEW.WINNER;

			IF TEAM_ID_WIN=TEAM1_ID THEN
					WINNER_ID:=TEAM1_ID;
					LOSER_ID:=TEAM2_ID;
			ELSE
					WINNER_ID:=TEAM2_ID;
					LOSER_ID:=TEAM1_ID;
			end if;


			CHK1:=CHECKING_TEAM_STAT(WINNER_ID);
			CHK2:=CHECKING_TEAM_STAT(LOSER_ID);
			IF CHK1 IS NULL THEN
					STAT_ID:='STAT '|| WINNER_ID;
					INSERT INTO STAT VALUES (STAT_ID, 1, 10);
					INSERT INTO TEAM_STAT VALUES (STAT_ID, WINNER_ID, 1, 0, 0);
			ELSE
			    	UPDATE STAT
					SET NUM_OF_MATCHES = NUM_OF_MATCHES + 1,
					    RATING=RATING+10
					WHERE STAT_ID=CHK1;
					UPDATE TEAM_STAT
					SET TOTAL_WIN = TOTAL_WIN + 1
					WHERE TEAM_ID = WINNER_ID;
			END IF;
			IF CHK2 IS NULL THEN
					STAT_ID:='STAT '|| LOSER_ID;
					INSERT INTO STAT VALUES (STAT_ID, 1, -5);
					INSERT INTO TEAM_STAT VALUES (STAT_ID, LOSER_ID, 0, 1, 0);
			ELSE
			    UPDATE STAT
					SET NUM_OF_MATCHES = NUM_OF_MATCHES + 1,
					    RATING=RATING-5
					WHERE STAT_ID=CHK2;
					UPDATE TEAM_STAT
					SET TOTAL_LOSE = TOTAL_LOSE + 1
					WHERE TEAM_ID = LOSER_ID;
			END IF;
		ELSE
		    CHK1:=CHECKING_TEAM_STAT(TEAM1_ID);
			CHK2:=CHECKING_TEAM_STAT(TEAM2_ID);
			IF CHK1 IS NULL THEN
					STAT_ID:='STAT '|| TEAM1_ID;
					INSERT INTO STAT VALUES (STAT_ID, 1, 0);
					INSERT INTO TEAM_STAT VALUES (STAT_ID, TEAM1_ID, 0, 0, 1);
			ELSE
					UPDATE TEAM_STAT
					SET NOT_PLAYED = NOT_PLAYED + 1
					WHERE TEAM_ID = TEAM1_ID;
			END IF;
			IF CHK2 IS NULL THEN
					STAT_ID:='STAT '|| TEAM2_ID;
					INSERT INTO STAT VALUES (STAT_ID, 1, 0);
					INSERT INTO TEAM_STAT VALUES (STAT_ID, TEAM2_ID, 0, 0, 1);
			ELSE
					UPDATE TEAM_STAT
					SET NOT_PLAYED = NOT_PLAYED + 1
					WHERE TEAM_ID = TEAM2_ID;
			END IF;

		END IF;



END;
/


--CHECKING A PLAYER ALREADY IN PLAYER STAT TABLE
CREATE OR REPLACE FUNCTION CHECKING_PLAYER_PLAYERSTAT(PID IN VARCHAR2)
RETURN NUMBER IS
	CNT NUMBER;
BEGIN
	SELECT COUNT(*) INTO CNT
	FROM PLAYER_STAT
	WHERE PLAYER_ID=PID;
	IF CNT>0 THEN
		RETURN 1;
	ELSE
		RETURN 0;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
		RETURN 0;
END;
/

-- BEGIN
-- 	DBMS_OUTPUT.PUT_LINE(CHECKING_PLAYER_PLAYERSTAT('ENG_WARNER_12-03-95'));
-- END;
-- /


--CHECKING IF A PLAYER IS A MAN OF THE MATCH
CREATE OR REPLACE FUNCTION CHECKING_PLAYER_MOTM(MID IN VARCHAR2, P_ID IN VARCHAR2)
RETURN NUMBER IS
	CNT NUMBER;
	PID VARCHAR2(50);
BEGIN
	SELECT MOTM INTO PID
	FROM MATCH
	WHERE MATCH_ID=MID;
	IF PID=P_ID THEN
		RETURN 1;
	ELSE
		RETURN 0;
	END IF;
EXCEPTION
	WHEN OTHERS THEN
		RETURN 0;
END;
/


-- DELETE TEAM_STAT;
-- DELETE PLAYER_STAT;
-- DELETE STAT;
-- DELETE PLAYER_SCORE;
-- 
-- UPDATE PLAYER_SCORE SET SCORED_RUNS=45 WHERE MATCH_ID='AUSENG_11.09.20' AND PLAYER_ID='AUS_Stoinis_16-08-86';

CREATE OR REPLACE TRIGGER PLAYER_STAT_UPDATE
AFTER INSERT OR UPDATE
ON PLAYER_SCORE
FOR EACH ROW

DECLARE
	ST_ID VARCHAR2(50);
	MID VARCHAR2(50);
	PID VARCHAR2(50);
	S_RUN NUMBER;
	BALL_BATTED NUMBER;
	FOURS NUMBER;
	SIXES NUMBER;
	NOTOUT VARCHAR2(10);
	OVERS NUMBER;
	GIVENRUNS NUMBER;
	WICKETS NUMBER;
	CHK1 NUMBER;
	CHK2 NUMBER;
	RAT NUMBER;
	IS_MOTM NUMBER;
	IS_CENTURY NUMBER;
	IS_FIFTY NUMBER;
	IS_FIFER NUMBER;
	ST_RATE NUMBER;
	BAT_AVG NUMBER;
	BOWL_AVG NUMBER;
	BOWL_ST_RATE NUMBER;
	IS_NOTOUT NUMBER;
	PREV_NUM_MATCHES NUMBER;
	PREV_SCORED_RUN NUMBER;
	PREV_ST_RATE NUMBER;
	PREV_BOWL_AVG NUMBER;
	PREV_BOWL_ST_RATE NUMBER;
BEGIN
	MID := :NEW.MATCH_ID;
	PID := :NEW.PLAYER_ID;
	S_RUN := NVL(:NEW.SCORED_RUNS,0);
	BALL_BATTED := NVL(:NEW.NUM_OF_BALLS_BATTED,0);
	FOURS := NVL(:NEW.NUM_OF_FOURS,0);
	SIXES := NVL(:NEW.NUM_OF_SIXES,0);
	NOTOUT := NVL(:NEW.NOT_OUT,'NO');
	OVERS := NVL(:NEW.NUM_OF_OVERS_BOWLED,0);
	GIVENRUNS := NVL(:NEW.GIVEN_RUNS,0);
	WICKETS := NVL(:NEW.NUM_OF_WICKETS,0);
	
	IS_MOTM := CHECKING_PLAYER_MOTM(MID,PID);
	
	IF S_RUN>=100 THEN
		IS_CENTURY:=1;
	ELSE
		IS_CENTURY:=0;
	END IF;
	
	IF S_RUN>=50 AND S_RUN<100 THEN
		IS_FIFTY:=1;
	ELSE
		IS_FIFTY:=0;
	END IF;
	
	IF WICKETS>=5 THEN
		IS_FIFER:=1;
	ELSE
		IS_FIFER:=0;
	END IF;
	
	IF UPPER(NOTOUT)='YES' THEN
		IS_NOTOUT := 1;
	ELSE
		IS_NOTOUT := 0;
	END IF;
	
	
	CHK1 := CHECKING_PLAYER_PLAYERSTAT(PID);
	
	IF CHK1=1 THEN
		ST_ID := 'STAT '||PID;
		RAT := 5;
		
		SELECT NUM_OF_MATCHES INTO PREV_NUM_MATCHES
		FROM STAT
		WHERE STAT_ID=ST_ID;
		
		SELECT SCORED_RUN,STRIKE_RATE,BOWLING_AVG INTO PREV_SCORED_RUN,PREV_ST_RATE,PREV_BOWL_AVG
		FROM PLAYER_STAT
		WHERE PLAYER_ID=PID;
		
		BAT_AVG := ROUND((PREV_SCORED_RUN+S_RUN)/(PREV_NUM_MATCHES+1),2);
		
		IF BALL_BATTED>0 THEN
			ST_RATE := NVL(ROUND((S_RUN/BALL_BATTED)*100,2),0);
		ELSE
			ST_RATE:=0;
		END IF;
		
		ST_RATE := ROUND((PREV_ST_RATE*PREV_NUM_MATCHES+ ST_RATE)/(PREV_NUM_MATCHES+1),2);
		
		
		IF WICKETS>0 THEN
			BOWL_AVG := NVL(ROUND((GIVENRUNS/WICKETS),2),0);
		ELSE
			BOWL_AVG := 0;
		END IF;
		
		BOWL_AVG := ROUND((PREV_BOWL_AVG*PREV_NUM_MATCHES + BOWL_AVG)/(PREV_NUM_MATCHES+1),2);
		
		IF OVERS>0 THEN
			BOWL_ST_RATE := NVL(ROUND((GIVENRUNS/(OVERS*6))*100,2),0);
-- 			DBMS_OUTPUT.PUT_LINE('INITIAL : '||BOWL_ST_RATE);
		ELSE
			BOWL_ST_RATE := 0;
		END IF;
-- 		DBMS_OUTPUT.PUT_LINE('FINAL ER AGE : '||BOWL_ST_RATE|| PREV_BOWL_ST_RATE|| PREV_NUM_MATCHES);
		PREV_BOWL_ST_RATE := NVL(PREV_BOWL_ST_RATE,0);
		BOWL_ST_RATE := ROUND((PREV_BOWL_ST_RATE*PREV_NUM_MATCHES + BOWL_ST_RATE)/(PREV_NUM_MATCHES+1),2);
-- 		DBMS_OUTPUT.PUT_LINE('FINAL : '||BOWL_ST_RATE);
		
		UPDATE STAT
		SET NUM_OF_MATCHES=NUM_OF_MATCHES+1,
				RATING=RATING+RAT
		WHERE STAT_ID=ST_ID;
		
		UPDATE PLAYER_STAT
		SET SCORED_RUN=SCORED_RUN+S_RUN,
				NUM_OF_MOTM=NUM_OF_MOTM+IS_MOTM,
				NUM_OF_HUNDRED=NUM_OF_HUNDRED+IS_CENTURY,
				NUM_OF_FIFTY=NUM_OF_FIFTY+IS_FIFTY,
				TOTAL_RUN=TOTAL_RUN+S_RUN,
				NOT_OUT = NOT_OUT+IS_NOTOUT,
				AVERAGE_SCORED_RUN=BAT_AVG,
				STRIKE_RATE=ST_RATE,
				NUM_OF_WICKETS=NUM_OF_WICKETS+WICKETS,
				NUM_OF_FIVE_WICKETS=NUM_OF_FIVE_WICKETS+IS_FIFER,
				NUM_OF_OVERS=NUM_OF_OVERS+OVERS,
				GIVEN_RUN=GIVEN_RUN+GIVENRUNS,
				BOWLING_AVG=BOWL_AVG,
				BOWLING_STRIKE_RATE=BOWL_ST_RATE
				
		WHERE PLAYER_ID=PID;
		
	ELSE
		ST_ID := 'STAT '||PID;
		RAT := 5;
		IF BALL_BATTED>0 THEN
			ST_RATE := NVL(ROUND((S_RUN/BALL_BATTED)*100,2),0);
		ELSE
			ST_RATE:=0;
		END IF;
		
		IF WICKETS>0 THEN
			BOWL_AVG := NVL(ROUND((GIVENRUNS/WICKETS),2),0);
		ELSE
			BOWL_AVG := 0;
		END IF;
		
		IF OVERS>0 THEN
			BOWL_ST_RATE := NVL(ROUND((GIVENRUNS/(OVERS*6))*100,2),0);
-- 			DBMS_OUTPUT.PUT_LINE('IN INSERT '||BOWL_ST_RATE);
		ELSE
			BOWL_ST_RATE := 0;
-- 			DBMS_OUTPUT.PUT_LINE('IN INSERT OVER 00 '||BOWL_ST_RATE);
		END IF;
		
		INSERT INTO STAT
		VALUES(ST_ID, 1,RAT);
		
		INSERT INTO PLAYER_STAT
		VALUES(ST_ID, PID, S_RUN, IS_MOTM, IS_CENTURY, IS_FIFTY, S_RUN, IS_NOTOUT, S_RUN, ST_RATE, WICKETS, IS_FIFER, OVERS, GIVENRUNS, BOWL_AVG, BOWL_ST_RATE);
		
	END IF;


END;
/


--team player trigger

CREATE OR REPLACE TRIGGER TEAM_PLAYER_TRIGGER
    AFTER INSERT OR UPDATE
    ON PLAYER
    FOR EACH ROW
DECLARE
    P_ID VARCHAR2(50 CHAR);
    T_ID VARCHAR2(50 CHAR);
BEGIN
    SELECT TEAM_ID INTO T_ID FROM TEAM WHERE NAME=(SELECT NATIONALITY FROM PERSON WHERE PERSON_ID=:NEW.PLAYER_ID);
    P_ID:=:NEW.PLAYER_ID;

    INSERT INTO TEAM_PLAYER VALUES(T_ID, P_ID);

END;
/





























